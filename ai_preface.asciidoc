[[ai_preface]]
[preface]
== Preface to the Third Edition: TDD in the age of AI

Is there any point in learning TDD now that AI can write code for you?
A single prompt could probably generate the entire example application in this book.

The truth is that it's too early to tell.  AI is still in its infancy,
and who knows what it'll be able to do in a few years or even months' time.

What we do know is that right now,
AI is both insanely impressive and incredibly unreliable.
AI tools regularly hallucinate things that don't exist,
and when left to their own devices,
they produce code which, even when it does work,
tends towards horrendous duplication,
strange hacks, and is soon completely unmaintainable.

What we're finding is that AI works best when it works on small,
well-defined problems, with frequent checks for correctness
to catch those hallucinations, and regular review
to ensure that the code that comes out is maintainable.

In short, all of the techniques of TDD:

* We start with a failing test that defines a small new piece of functionality
  that we'd like to add to our code

* We train ourselves to work incrementally, in small steps,
  slicing our problem up into small chunks, and working on them one at a time.

* We regularly run our entire test suite to catch any bugs or regressions
  or hallucinations as soon as they happen.

* And we we are regularly prompted to review and refactor our code,
  to make sure it is expressive and maintainable.


Probably the AI-enabled workflow of the future
will look very different to what we have now,
but all the indications are that the most effective approach is going to be
incremental, have checks and balances to avoid hallucinations,
and systematically involve humans in the loop to ensure quality.

And the closest workflow we have to that today, is TDD.
